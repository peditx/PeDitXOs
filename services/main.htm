<%# LuCI - Lua Configuration Interface - PeDitXOS Store v4 %>
<%+header%>
<style>
    /* ===== NEW THEME (Dracula Inspired) ===== */
    :root {
        --bg-color: #282a36;
        --card-bg: #3a3c51;
        --header-bg: #21222c;
        --text-color: #f8f8f2;
        --primary-color: #50fa7b;   /* Green */
        --secondary-color: #ff79c6; /* Pink */
        --danger-color: #ff5555;    /* Red */
        --warning-color: #f1fa8c;   /* Yellow */
        --info-color: #8be9fd;      /* Cyan */
        --purple-color: #bd93f9;    /* Purple */
        --border-color: #44475a;
        --hover-color: #44475a;
        --orange-gradient-start: #ffae42;
        --orange-gradient-end: #ff8c00;
    }

    body { 
        background-color: var(--bg-color);
        color: var(--text-color);
    }
    
    .cbi-map-title {
        padding-bottom: 15px;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 10px;
        color: var(--info-color);
    }

    .action-grid { 
        display: flex; 
        flex-wrap: wrap;
        gap: 20px; 
        margin-top: 20px;
    }
    .action-item { 
        background: var(--card-bg); 
        padding: 20px; 
        border-radius: 12px; 
        display: flex; 
        flex-direction: column; 
        cursor: pointer; 
        border: 1px solid var(--border-color); 
        transition: transform 0.2s, box-shadow 0.2s, border-color 0.2s;
        flex-basis: 280px;
        flex-shrink: 0; /* --- ADDED: Prevents items from shrinking --- */
    }
    .action-item:hover { 
        transform: translateY(-5px); 
        box-shadow: 0 6px 15px rgba(0,0,0,0.4); 
        border-color: var(--primary-color);
    }
    .action-item.selected { 
        border-color: var(--orange-gradient-start); 
        box-shadow: 0 0 0 3px rgba(255, 174, 66, 0.5), 0 6px 15px rgba(0,0,0,0.4); 
    }
    
    .action-item-header { display: flex; align-items: center; margin-bottom: 15px; }
    .action-item-header img { width: 48px; height: 48px; margin-right: 15px; border-radius: 8px; background-color: var(--bg-color); }
    .action-item-header h4 { margin: 0; font-size: 1.1em; color: var(--text-color); }
    
    .action-item p { font-size: 0.9em; color: #ccc; flex-grow: 1; margin-bottom: 15px; }
    
    .action-item-footer { margin-top: auto; font-size: 0.8em; color: #bd93f9; }
    
    .execute-bar { margin-top: 25px; text-align: center; display: flex; justify-content: center; align-items: center; gap: 20px; flex-wrap: wrap; }

    @keyframes pulse { 
        0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(255, 174, 66, 0.7); } 
        70% { transform: scale(1.02); box-shadow: 0 0 0 10px rgba(255, 174, 66, 0); } 
        100% { transform: scale(1); } 
    }

    .peditx-main-button { 
        font-size: 18px; 
        padding: 12px 40px; 
        font-weight: bold; 
        border: none; 
        border-radius: 50px; 
        box-shadow: 0 4px 15px rgba(0,0,0,0.2); 
        transition: background 0.3s ease, transform 0.2s ease; 
        cursor: pointer; 
        display: inline-flex; 
        align-items: center; 
        justify-content: center;
        text-shadow: 0 1px 1px rgba(0,0,0,0.2);
    }
    #execute-button { 
        background: linear-gradient(135deg, var(--orange-gradient-start), var(--orange-gradient-end));
        color: var(--header-bg);
        animation: pulse 2.5s infinite; 
    }
    #execute-button:hover { 
        background: linear-gradient(135deg, var(--orange-gradient-end), #e87a00); 
        transform: translateY(-2px);
        animation-play-state: paused; 
    }
    #execute-button:disabled { 
        background: #555; 
        cursor: not-allowed; 
        box-shadow: none; 
        transform: none; 
        animation: none; 
        color: #999; 
    }
    
    #stop-button { 
        background: var(--danger-color); 
        color: var(--text-color);
    }
    #stop-button:hover {
        background: #ff6e6e;
        transform: translateY(-2px);
    }

    .peditx-secondary-button {
        background: var(--info-color);
        color: var(--header-bg);
        font-size: 16px;
        padding: 10px 30px;
    }
    .peditx-secondary-button:hover {
        background: #a2f2ff;
        transform: translateY(-2px);
    }
    .peditx-secondary-button:disabled {
        background: #555;
        cursor: not-allowed;
        transform: none;
    }

    #refresh-luci-btn {
        background: var(--primary-color);
        color: var(--header-bg);
    }
    #refresh-luci-btn:hover {
        background: #6aff8f;
    }

    /* Style for the new self-update button */
    #self-update-btn {
        background: #6272a4; /* A different shade of blue/purple */
        color: var(--text-color);
        font-size: 14px;
        padding: 8px 20px;
    }
    #self-update-btn:hover {
        background: #7184c2;
    }

    .peditx-log-container { background-color: var(--header-bg); color: var(--text-color); font-family: monospace; padding: 15px; border-radius: 8px; height: 350px; overflow-y: scroll; white-space: pre-wrap; border: 1px solid var(--border-color); margin-top: 10px; box-shadow: inset 0 0 5px rgba(0,0,0,0.2); }
    .peditx-status { padding: 15px; margin-top: 20px; background-color: var(--card-bg); border-radius: 8px; text-align: center; font-weight: bold; border: 1px solid var(--border-color); color: var(--warning-color); }
    
    .log-controls { display: flex; justify-content: space-between; align-items: center; margin-top: 20px; gap: 10px; }
    .log-controls .cbi-button { font-size: 12px; padding: 8px 15px; border-radius: 5px; background-color: var(--hover-color); color: var(--text-color); border: 1px solid var(--border-color); transition: background 0.2s, border-color 0.2s; cursor: pointer; }
    .log-controls .cbi-button:hover { background-color: var(--card-bg); border-color: var(--secondary-color); }
    .log-controls label { margin-right: 10px; cursor: pointer; user-select: none; }
    .log-controls input[type="checkbox"] { vertical-align: middle; margin-right: 5px; accent-color: var(--secondary-color); }

    /* Search bar style */
    #search-bar {
        width: 100%; 
        padding: 12px; 
        border-radius: 8px; 
        background: var(--card-bg); 
        border: 1px solid var(--border-color); 
        color: var(--text-color);
        transition: border-color 0.3s, box-shadow 0.3s;
    }
    #search-bar:focus {
        outline: none;
        border-color: var(--secondary-color);
        box-shadow: 0 0 0 3px rgba(255, 121, 198, 0.2);
    }
</style>

<div class="cbi-map">
    <div class="cbi-map-title">
        <h2>PeDitXOS Store</h2>
    </div>
    <p>Select a service to install. The list is fetched from an external source.</p>
    
    <div class="cbi-input-section" style="margin-bottom: 20px;">
        <input type="text" id="search-bar" class="cbi-input-text" placeholder="Search for a service...">
    </div>

    <div id="service-grid" class="action-grid">
        <p>Loading services...</p>
    </div>

    <div class="execute-bar">
        <button id="self-update-btn" class="peditx-main-button">Update UI</button>
        <button id="update-list-btn" class="peditx-main-button peditx-secondary-button">Update List</button>
        <button id="execute-button" class="peditx-main-button">Install Selected</button>
        <button id="refresh-luci-btn" class="peditx-main-button peditx-secondary-button">Refresh LuCI</button>
        <button id="stop-button" class="peditx-main-button" style="display:none;">Stop</button>
    </div>

    <div id="peditx-status" class="peditx-status">Ready. Select a service and press Install.</div>
    <div class="log-controls">
        <div>
            <label for="auto-refresh-toggle"><input type="checkbox" id="auto-refresh-toggle" checked> Auto Refresh Log</label>
        </div>
        <div>
            <button class="cbi-button" onclick="pollStatus(true)">Refresh Log</button>
            <button class="cbi-button" onclick="clearLog()">Clear Log</button>
        </div>
    </div>
    <pre id="log-output" class="peditx-log-container">Welcome to the PeDitXOS Store!</pre>
</div>

<script type="text/javascript">
    // URLs for API calls
    var servicesURL = '<%=luci.dispatcher.build_url("admin", "peditxos", "serviceinstaller", "get_services")%>';
    var statusURL = '<%=luci.dispatcher.build_url("admin", "peditxos", "serviceinstaller", "status")%>';
    var runURL = '<%=luci.dispatcher.build_url("admin", "peditxos", "serviceinstaller", "run")%>';

    // DOM Elements
    var serviceGrid = document.getElementById('service-grid');
    var startButton = document.getElementById('execute-button');
    var stopButton = document.getElementById('stop-button');
    var statusDiv = document.getElementById('peditx-status');
    var logOutput = document.getElementById('log-output');
    var autoRefreshToggle = document.getElementById('auto-refresh-toggle');
    var updateBtn = document.getElementById('update-list-btn');
    var refreshLuciBtn = document.getElementById('refresh-luci-btn');
    var searchBar = document.getElementById('search-bar');
    var selfUpdateBtn = document.getElementById('self-update-btn'); // New Button

    // State variables
    var selectedAction = null;
    var isPolling = false;

    // --- Core Functions ---

    function pollStatus(force) {
        if (isPolling && !force) return;

        XHR.poll(2, statusURL, null, function(x, data) {
            if (!x || x.status !== 200 || !data) {
                XHR.poll.stop();
                isPolling = false;
                return;
            }

            if (logOutput.textContent !== data.log) {
                logOutput.textContent = data.log;
                logOutput.scrollTop = logOutput.scrollHeight;
            }
            
            if (data.running) {
                if (!isPolling) isPolling = true;
                startButton.disabled = true;
                stopButton.style.display = 'inline-flex';
                updateBtn.disabled = true;
                refreshLuciBtn.disabled = true;
                selfUpdateBtn.disabled = true;
            } else {
                if (isPolling) {
                    if (!autoRefreshToggle.checked) {
                        XHR.poll.stop();
                    }
                    isPolling = false;
                }
                startButton.disabled = false;
                stopButton.style.display = 'none';
                updateBtn.disabled = false;
                refreshLuciBtn.disabled = false;
                selfUpdateBtn.disabled = false;
            }
        });
    }
    
    function clearLog() {
        XHR.get(runURL, { action: 'clear_log' }, function(x, data) {
            if (x && x.status === 200) {
                pollStatus(true);
            }
        });
    }
    
    function startActionByName(actionName) {
        XHR.get(runURL, { action: actionName }, function(x, data) {
            if (x && x.status === 200 && data.success) {
                statusDiv.innerText = 'Starting ' + actionName + '...';
                if (!isPolling) {
                    pollStatus(true);
                }
            } else {
                statusDiv.innerText = 'Error starting action: ' + (data ? data.error : 'Unknown');
            }
        });
    }

    function renderServices(services) {
        serviceGrid.innerHTML = '';
        if (!services || !Array.isArray(services) || services.length === 0) {
            serviceGrid.innerHTML = '<p>No services found or list is empty. Please try the "Update List" button.</p>';
            return;
        }

        services.forEach(function(service) {
            var item = document.createElement('div');
            item.className = 'action-item';
            item.setAttribute('data-action', service.id);
            item.innerHTML = `
                <div class="action-item-header">
                    <img src="${service.icon_url}" alt="${service.name}" onerror="this.src='https.placehold.co/48x48/282a36/f8f8f2?text=ICON'; this.onerror=null;">
                    <h4>${service.name}</h4>
                </div>
                <p>${service.description}</p>
                <div class="action-item-footer">
                    <span>Version: ${service.version || 'N/A'}</span>
                </div>
            `;
            item.addEventListener('click', function() {
                if (isPolling) return;
                document.querySelectorAll('.action-item').forEach(el => el.classList.remove('selected'));
                this.classList.add('selected');
                selectedAction = this.getAttribute('data-action');
                statusDiv.innerText = `Selected: ${service.name}. Press Install to proceed.`;
            });
            serviceGrid.appendChild(item);
        });
    }

    function fetchServices() {
        serviceGrid.innerHTML = '<p>Loading services...</p>';
        XHR.get(servicesURL, null, function(x, data) {
            if (x && x.status === 200 && data && !data.error) {
                renderServices(data); 
            } else {
                serviceGrid.innerHTML = '<p style="color: var(--danger-color);">Error: ' + (data ? data.error : 'Could not fetch service list.') + '</p>';
            }
        });
    }

    // --- Event Listeners ---

    searchBar.addEventListener('input', function() {
        var searchTerm = this.value.toLowerCase().trim();
        var services = document.querySelectorAll('.action-item');

        services.forEach(function(service) {
            var serviceName = service.querySelector('h4').textContent.toLowerCase();
            var serviceDesc = service.querySelector('p').textContent.toLowerCase();
            
            if (serviceName.includes(searchTerm) || serviceDesc.includes(searchTerm)) {
                service.style.display = 'flex';
            } else {
                service.style.display = 'none';
            }
        });
    });

    startButton.addEventListener('click', function() {
        if (!selectedAction) {
            statusDiv.innerText = 'Please select a service to install first.';
            statusDiv.style.color = 'var(--danger-color)';
            setTimeout(() => { 
                statusDiv.innerText = 'Ready. Select a service and press Install.';
                statusDiv.style.color = 'var(--warning-color)';
            }, 3000);
            return;
        }
        startActionByName(selectedAction);
    });

    stopButton.addEventListener('click', function() {
        statusDiv.innerText = 'Stopping process...';
        XHR.get(runURL, { action: 'stop_process' }, function(x, data) {
            if (x && x.status === 200 && data.success) {
                pollStatus(true);
            } else {
                statusDiv.innerText = 'Error stopping process.';
            }
        });
    });

    autoRefreshToggle.addEventListener('change', function() {
        if (this.checked) {
            statusDiv.innerText = 'Auto-refresh enabled.';
            if (!isPolling) {
                pollStatus(true);
            }
        } else {
            statusDiv.innerText = 'Auto-refresh disabled.';
            if (isPolling) {
                XHR.poll.stop();
                isPolling = false;
            }
        }
    });

    updateBtn.addEventListener('click', function() {
        statusDiv.innerText = 'Updating app list...';
        startActionByName('update_service_list');
        setTimeout(fetchServices, 3000);
    });

    refreshLuciBtn.addEventListener('click', function() {
        statusDiv.innerText = 'Clearing LuCI cache and reloading...';
        XHR.get(runURL, { action: 'refresh_luci' }, function(x, data) {
            if (x && x.status === 200) {
                setTimeout(function() { window.location.reload(); }, 1000);
            } else {
                statusDiv.innerText = 'Error refreshing LuCI.';
            }
        });
    });

    // New event listener for the self-update button
    selfUpdateBtn.addEventListener('click', function() {
        if (confirm("Are you sure you want to update the store UI? This will replace the current view file.")) {
            statusDiv.innerText = 'Starting UI self-update...';
            startActionByName('self_update_view');
        }
    });


    // --- Initial Load ---
    fetchServices();
    pollStatus(true);
</script>
<%+footer%>
